
The tty clicks module
			---------------------
			Karl Dahlke
			eklhad@gmail.com

When this module is installed, soft clicks accompany
the nonspace characters that are sent to the console,
while a longer swoop indicates a newline character.
These sounds simulate an old fashion teletype (how many of you are old enough
to remember those) running at 2400 baud.
Why would you want such a thing?
You probably wouldn't, but a blind person might.

When I was a freshman at Michigan State University
I did most of my work on a paper teletype, which was state-of-the-art
at that time, especially if you could glom onto one of the 300 baud machines!
The clatter of the teletype was an annoyance for most, but it was a blessing for me.
I knew when the computer had responded, and the nature of that response.
If a volunteer reader was not available, and the homework assignment was modest,
I could log onto the system, type my program into the editor,
compile the program, and run the executable,
based solely on the clicks of the teletype.
After my roommate read through the printout and verified the results,
I tucked it away in my notebook and turned it in the next day for a grade.
Although I now have a speech synthesizer at hand,
I still need the audio feedback that was an unintentional
feature of the mechanical teletype.
To this end I wrote a loadable module, ttyclicks.ko,
which creates similar sounds using the PC speaker.

It is important that this be a separate, stand alone kernel module
that does not depend on anything else.
If the adapter isn't running,
if the synthesizer isn't working,
if the sound card isn't working,
if the sound card is not properly initialized,
if the sound module is not loaded,
if the wrong sound module is loaded,
if an essential daemon is not running -
at least I have my clicks.
I can tell, to some degree, what the computer is doing.
If it gets to a login prompt, I know what that sounds like.
I can log in and listen for the single click of the $ prompt,
which tells me I have a shell.
Then I can issue some basic commands,
trying to load modules and start the adapter.
I need these clicks to be present whenever the kernel is running.
To this end, ttyclicks is a self-contained module
that is loaded first in the boot sequence,
or is built into the kernel.
I can turn off the clicks at run time if I wish,
but if the synthesizer ever fails me, for any reason,
I have the clicks to fall back on.

As you can see from the above paragraph,
I don't want to run these clicks through anybody's sound card.
There are too many points of failure along that pathway.
Instead, I use the in-built toggle speaker at port 0x61.
Not all machines have this speaker, but most do,
and I wouldn't buy a computer that didn't.

Other programs, outside of the linux kernel, can stil take advantage of
this legacy speaker.
Grub, for instance, beeps when it brings up the menu,
provided I put a control G in the title.
This tells me that I have ten seconds to cursor up and down
and select a target, if I want something other than the default.
Beyound this, it tells me that the machine has gotten to grub successfully,
and is not stuck in bios for some bizarre reason.
It is difficult to overstate the importance of this little in-built speaker
for the blind user.

Module parameters:

As always, you can run modinfo ttyclicks.ko to review these parameters.

enabled = 1 or 0

If 1, then sounds are enabled as soon as the module is loaded.
If 0, then sounds are not enabled.
These sounds can be turned on or off at run time by the exported symbol
	bool ttyclicks_on;
Thus other modules can turn sounds on or off.
In particular, the acsint device driver,
and any adapter that uses this driver,
has access to this master switch,
along with most of the other parameters that control this module.
See acsint.txt for more details.

fgtty = 1 or 0

This parameter enables the clicks that accompany the display of characters
from  the foreground tty.
The corresponding exported symbol is
	bool ttyclicks_tty;

kmsg = 1 or 0

Printk messages do not pass through the tty,
and do not generate the aforementioned clicks.
However, if this switch is enabled,
each printk message generates a distinctive sequence of tones.
This is like an alarm,
telling the user that he needs to read the message on the screen.
The corresponding exported symbol is
	bool ttyclicks_kmsg;

cursormotion = 0 or 1

Many screen programs generate ansi escape sequences that position the cursor
and set character attributes such as underline etc.
This is not true output, and does not generate clicks by default.
However, you can set this parameter to 1 if you want these characters
to generate clicks.

sleep = 0 or 1

When this parameter is 0, the computer times its clicks by cpu loops.
A click is, for instance,
	toggle the speaker; /* start pulse */
	udelay(600);
	toggle the speaker; /* end pulse */
	udelay(4000-600);
This is not optimal, but at present there are few practical alternatives.
We can't sleep when called from the PREWRITE notifier, which is atomic.
Once the notifier returns, the vt process can sleep,
and that is precisely what I do, but that requires a patch to the kernel.
A better approach adds a new return value, NOTIFY_PAUSE,
along with the number of milliseconds to sleep.
The calling function can then sleep for the specified number of milliseconds,
if the context permits.
I may submit such a patch some day,
but in the meantime you have to leave sleep = 0 and burn cpu cycles,
or patch the kernel yourself, whence sleep=1 will work properly.
The following patch is appropriate for kernel 2.6.36 and above.

diff -uprN a/drivers/tty/vt/vt.c b/drivers/tty/vt/vt.c
--- a/drivers/tty/vt/vt.c	2011-03-19 00:22:03.000000000 -0400
+++ b/drivers/tty/vt/vt.c	2011-03-19 00:22:03.000000000 -0400
@@ -2255,6 +2255,15 @@ rescan_last_byte:
 					&param) == NOTIFY_STOP)
 			continue;
 
+/* Sleep for a while.  I would call msleep(),
+ * but that addds an extra jiffy.  Timing is tight, and I can't afford that.
+ * Results would be inconsistent, based on the value of HZ.  This is better. */
+		if(param.c == 0xac97) {
+			unsigned long timeout = msecs_to_jiffies(4);
+			while (timeout)
+				timeout = schedule_timeout_uninterruptible(timeout);
+		}
+
                 /* If the original code was a control character we
                  * only allow a glyph to be displayed if the code is
                  * not normally used (such as for cursor movement) or

This module performs functions that really belong in keyboard.c,
along side kd_mksound().
I envision kd_mkpulse, kd_mkswoop, and kd_mknotes.
These functions issue a 0.6 millisecond pulse,
perform a quick swoop  from one frequency to another,
and play a sequence of tones, respectively.
I may submit such a patch some day,
but in the meantime this module performs these functions,
and makes them available to other modules, and hence to various adapters.

void ttyclicks_click(void);

Generate a 0.6 millisecond pulse.
As mentioned above, this should really be moved to kd_mkpulse in keyboard.c.

void ttyclicks_cr(void);

Generate a frequency swoop from 1160 to 1500 hz.
This sound is associated with the newline character at the console,
but you can use this function to generate the same sound whenever you wish.

void ttyclicks_notes(const short *p);

Play a series of notes in the background.
Each note is defined by two shorts, a frequency and a duration.
The frequency is in hurtz, and the duration is in hundredths of a second.
A frequency of -1 is a rest.
The queue can only hold 32 notes,
so don't try to play an entire sonata.

void ttyclicks_bell(void);

This function generates an 1800 hz tone for a tenth of a second.
this is associated with the control G bell.
(The traditional bell is 1000 hz, but I wanted a slightly higher tone.)
As long as this module is loaded, it swallows control G, and sounds the bell,
rather then passing it through to the console and letting the console
ring the bell.  This allows the master switch, ttyclicks_on,
to enable or disable the control G bell along with all the other sounds.

This module is integral to many command line adapters,
as a complement to speech or braille.  Beyond this,
it can prove invaluable if the adapter is not working for any reason.
I have relied on this form of audio feedback, in some form or another,
for over 30 years.  If you have any questions,
send them to me using the email at the top of this file.
